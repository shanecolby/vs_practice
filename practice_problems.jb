# print out everyother element in the array [1,2,3,4,5,6,7,8,9,10,11,12,13,14]




# def everyOther(array)
#   index = 0
#   while index < array.length
#     p array[index]
#     index += 2
#   end


# end
# p everyOther([1,2,3,4,5,6,7,8,9,10,11,12,13,14])





# def everyother(array)
#   index = 0
#   new_array = []
#   while index < array.length
#     new_array << array[index]
#     index += 2
#   end
#   return new_array
# end
# p everyother([1,2,3,4,5])





# def everyOther(array)
#   index = 0
#   new_array = []
#   while index < array.length
#     new_array << array[index]
#     index += 2
#   end
#   return new_array


# end
# p everyOther([1,2,3,4,5,6,7,8,9,10,11,12,13,14])

#  reverse the order of the array [1,2,3,4,5]




# def reverse(array)
#   index = 0
#   while index < array.length
#     array[index]
#     index += 1
#   end
#   return array.reverse

# end
# p reverse([1,2,3,4,5])

# find the product of the array [1,2,3,4]






# def product(array)
#   index = 0
#   product = array[index]
#   while index < array.length
#     product = product * array[index]
#     index += 1
#   end
#   return product


# end
# p product([5,5,5])





# def product(array)
#   index = 0
#   product = array[index]
#   while index < array.length
#     product = product * array[index]
#     index += 1
#   end
#   return product
# end
# p product([1,2,3])



# def product(array)
#   index = 0
#   product = array[index]
#   while index < array.length
#     product = product * array[index]
#     index += 1
#   end
#   return product
# end
# p product([1,2,3,4])

#double the elements in a given array [2,4,6,8,10]




# def arrayDouble(array)
#   new_array = []
#   array.each do |number|
#     new_array << number * 2
#   end
#   return new_array
# end
# p arrayDouble([5,10,15])








# def double(array)
#   index = 0
#   while index < array.length
#     p array[index] * 2
#     index += 1  
#   end
# end
# p double([2,4,6,8,10])

# make new array of all numbers less than 10 [2,10,20,12,3,5,54,23,65,2,45,32,12,43,23,1]



# def lessThan10(array)
#   index = 0
#   new_array = []
#   while index < array.length
#     if array[index] < 10
#       new_array << array[index]
#     end
#     index += 1
#   end
#   return new_array


# end
# p lessThan10([2,10,20,12,3,5,54,23,65,2,45,32,12,43,23,1])

# def greater_than_24(array)
#   index = 0
#   new_array = []
#   while index < array.length
#     if array[index] > 24
#       new_array << array[index]
#     end
#     index += 1
#   end
#   return new_array
# end
# p greater_than_24([2,10,20,12,3,5,54,23,65,2,45,32,12,43,23,1])



# def lessthan100(array)
#   index = 0
#   new_array = []
#   while index < array.length
#     if array[index] < 10
#       new_array << array[index]
#     end
#     index += 1
#   end
#   return new_array
# end
# p lessthan100([2,10,20,12,3,5,54,23,65,2,45,32,12,43,23,1])

# find the sum of the arry [1,2,3]
# def sum(array)
# index = 1
# sum = array[0]
# while index < array.length
#   sum = sum + array[index]
#   index += 1
# end
# return sum
# end
# p sum([5,10,15])



 
# def sum(array)
#   index = 1
#   sum = array[0]
#   while index < array.length
#     sum += array[index]
#     index += 1
#   end
#   return sum
# end
# p sum([1,2,3,4])






# def sum(array)
#   index = 1
#   sum = array[0]
#   while index < array.length
#     sum += array[index]
#     index += 1
#   end
#   return sum

# end
# p sum([1,2,3])


# flip the key and value of this hash {"a" => 1, "b" => 2, "c" => 3}




# def flip(hash)
#   flipped = {}
#   hash.each do |key,value|
#     flipped[value] = key
#   end
#   return flipped

# end
# p flip({"a" => 1, "b" => 2, "c" => 3})





# def flip(hash)
#   new_hash = {}
#   hash.each do |key,value|
#     new_hash[value] = key
#   end
#   return new_hash
  


# end
# p flip({"a" => 1, "b" => 2, "c" => 3})

# conver hash into an array {"chair" => 100, "book" => 14}





# def convert(hash)
#   new_array = []
#   hash.each do |name,price|
#     new_array << [name,price]
#   end
#   return new_array
# end
# p convert({"chair" => 100, "book" => 14})

# def hashToArray(hash)
#   array = []
#   hash.each do |name,price|
#     array << [name,price]
#   end
#   return array

# end
# p hashToArray({"chair" => 100, "book" => 14})